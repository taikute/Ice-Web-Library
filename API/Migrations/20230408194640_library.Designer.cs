// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230408194640_library")]
    partial class library
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Data.Book", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AuthorID = 8,
                            CategoryID = 1,
                            Code = 0,
                            Price = 0,
                            Quantity = 1,
                            Title = "The Da Vinci Code"
                        },
                        new
                        {
                            ID = 2,
                            AuthorID = 3,
                            CategoryID = 3,
                            Code = 0,
                            Price = 0,
                            Quantity = 1,
                            Title = "The Hitchhiker's Guide to the Galaxy"
                        },
                        new
                        {
                            ID = 3,
                            AuthorID = 2,
                            CategoryID = 2,
                            Code = 0,
                            Price = 0,
                            Quantity = 1,
                            Title = "Pride and Prejudice"
                        });
                });

            modelBuilder.Entity("API.Data.BookAuthor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BookAuthor");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Albert Einstein"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Jane Austen"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Stephen Hawking"
                        },
                        new
                        {
                            ID = 4,
                            Name = "J.K. Rowling"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Neil deGrasse Tyson"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Isaac Asimov"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Dan Brown"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Michelle Obama"
                        });
                });

            modelBuilder.Entity("API.Data.BookCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BookCategory");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Detective"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Art"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Science"
                        });
                });

            modelBuilder.Entity("API.Data.BookInstance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BookCode")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StatusID");

                    b.ToTable("BookInstance");
                });

            modelBuilder.Entity("API.Data.BookStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BookStatus");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Available"
                        },
                        new
                        {
                            ID = 2,
                            Name = "On Loan"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Broken"
                        });
                });

            modelBuilder.Entity("API.Data.Loan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BookCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReaderID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("BookCode");

                    b.HasIndex("ReaderID");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("API.Data.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("User");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("API.Data.UserRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Reader"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Librarian"
                        });
                });

            modelBuilder.Entity("API.Data.Librarian", b =>
                {
                    b.HasBaseType("API.Data.User");

                    b.ToTable("Librarian");
                });

            modelBuilder.Entity("API.Data.Reader", b =>
                {
                    b.HasBaseType("API.Data.User");

                    b.ToTable("Reader");
                });

            modelBuilder.Entity("API.Data.Book", b =>
                {
                    b.HasOne("API.Data.BookAuthor", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Data.BookCategory", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("API.Data.BookInstance", b =>
                {
                    b.HasOne("API.Data.BookStatus", "Status")
                        .WithMany("BookInstances")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("API.Data.Loan", b =>
                {
                    b.HasOne("API.Data.BookInstance", "BookInstance")
                        .WithMany("Loans")
                        .HasForeignKey("BookCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Data.Reader", "Reader")
                        .WithMany("Loans")
                        .HasForeignKey("ReaderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookInstance");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("API.Data.User", b =>
                {
                    b.HasOne("API.Data.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Data.Librarian", b =>
                {
                    b.HasOne("API.Data.User", null)
                        .WithOne()
                        .HasForeignKey("API.Data.Librarian", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Data.Reader", b =>
                {
                    b.HasOne("API.Data.User", null)
                        .WithOne()
                        .HasForeignKey("API.Data.Reader", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Data.BookAuthor", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("API.Data.BookCategory", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("API.Data.BookInstance", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("API.Data.BookStatus", b =>
                {
                    b.Navigation("BookInstances");
                });

            modelBuilder.Entity("API.Data.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Data.Reader", b =>
                {
                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
