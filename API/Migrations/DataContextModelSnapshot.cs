// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Data.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Bio = "German physicist and mathematician who developed the theory of relativity",
                            Name = "Albert Einstein"
                        },
                        new
                        {
                            AuthorId = 2,
                            Bio = "English novelist known for her works of romantic fiction",
                            Name = "Jane Austen"
                        },
                        new
                        {
                            AuthorId = 3,
                            Bio = "English theoretical physicist and cosmologist",
                            Name = "Stephen Hawking"
                        },
                        new
                        {
                            AuthorId = 4,
                            Bio = "British author, philanthropist, film producer, television producer and screenwriter",
                            Name = "J.K. Rowling"
                        },
                        new
                        {
                            AuthorId = 5,
                            Bio = "English writer known for her detective novels",
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            AuthorId = 6,
                            Bio = "American astrophysicist, planetary scientist, author, and science communicator",
                            Name = "Neil deGrasse Tyson"
                        },
                        new
                        {
                            AuthorId = 7,
                            Bio = "American writer and professor of biochemistry",
                            Name = "Isaac Asimov"
                        },
                        new
                        {
                            AuthorId = 8,
                            Bio = "American author known for his thriller novels",
                            Name = "Dan Brown"
                        },
                        new
                        {
                            AuthorId = 9,
                            Bio = "American lawyer and author who served as the First Lady of the United States from 2009 to 2017",
                            Name = "Michelle Obama"
                        },
                        new
                        {
                            AuthorId = 10,
                            Bio = "English novelist, essayist, journalist and critic, best known for his dystopian novel 1984 and the allegorical novella Animal Farm",
                            Name = "George Orwell"
                        });
                });

            modelBuilder.Entity("API.Data.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CoverImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Language")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("PublishYear")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            CategoryId = 3,
                            CoverImagePath = "~/1.jpg",
                            Description = "A theoretical physicist's introduction to the theory of relativity",
                            Edition = "1st edition",
                            Language = "English",
                            PageCount = 160,
                            Price = 150000,
                            PublishYear = "1916",
                            PublisherId = 1,
                            Quantity = 5,
                            Title = "Relativity: The Special and General Theory"
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2,
                            CategoryId = 4,
                            CoverImagePath = "~/1.jpg",
                            Description = "A romantic novel about the pride and prejudices of the British upper class in the early 19th century",
                            Edition = "2nd edition",
                            Language = "English",
                            PageCount = 279,
                            Price = 100000,
                            PublishYear = "1813",
                            PublisherId = 2,
                            Quantity = 3,
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3,
                            CategoryId = 3,
                            CoverImagePath = "~/1.jpg",
                            Description = "A popular science book about cosmology and the universe",
                            Edition = "10th anniversary edition",
                            Language = "English",
                            PageCount = 212,
                            Price = 120000,
                            PublishYear = "1988",
                            PublisherId = 3,
                            Quantity = 7,
                            Title = "A Brief History of Time"
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4,
                            CategoryId = 4,
                            CoverImagePath = "~/1.jpg",
                            Description = "The first book in the Harry Potter series, a fantasy novel about a young wizard and his friends at Hogwarts School of Witchcraft and Wizardry",
                            Edition = "1st edition",
                            Language = "English",
                            PageCount = 223,
                            Price = 130000,
                            PublishYear = "1997",
                            PublisherId = 4,
                            Quantity = 2,
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5,
                            CategoryId = 1,
                            CoverImagePath = "~/1.jpg",
                            Description = "A detective novel about a murder on a train, featuring famous detective Hercule Poirot",
                            Edition = "2nd edition",
                            Language = "English",
                            PageCount = 256,
                            Price = 110000,
                            PublishYear = "1934",
                            PublisherId = 1,
                            Quantity = 4,
                            Title = "Murder on the Orient Express"
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 6,
                            CategoryId = 3,
                            CoverImagePath = "~/1.jpg",
                            Description = "An introduction to astrophysics for laypeople",
                            Edition = "1st edition",
                            Language = "English",
                            PageCount = 224,
                            Price = 140000,
                            PublishYear = "2017",
                            PublisherId = 5,
                            Quantity = 6,
                            Title = "Astrophysics for People in a Hurry"
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 7,
                            CategoryId = 2,
                            CoverImagePath = "~/1.jpg",
                            Description = "An annotated edition of the classic satire by Jonathan Swift",
                            Edition = "3rd edition",
                            Language = "English",
                            PageCount = 522,
                            Price = 105000,
                            PublishYear = "1960",
                            PublisherId = 2,
                            Quantity = 1,
                            Title = "The Annotated Gulliver's Travels"
                        },
                        new
                        {
                            BookId = 8,
                            AuthorId = 8,
                            CategoryId = 1,
                            CoverImagePath = "~/1.jpg",
                            Description = "A thriller novel by American author Dan Brown",
                            Edition = "First edition",
                            Language = "English",
                            PageCount = 481,
                            Price = 150000,
                            PublishYear = "2003",
                            PublisherId = 4,
                            Quantity = 10,
                            Title = "The Da Vinci Code"
                        },
                        new
                        {
                            BookId = 9,
                            AuthorId = 9,
                            CategoryId = 5,
                            CoverImagePath = "~/1.jpg",
                            Description = "An autobiography by Michelle Obama",
                            Edition = "First edition",
                            Language = "English",
                            PageCount = 426,
                            Price = 250000,
                            PublishYear = "2018",
                            PublisherId = 3,
                            Quantity = 8,
                            Title = "Becoming"
                        },
                        new
                        {
                            BookId = 10,
                            AuthorId = 9,
                            CategoryId = 4,
                            CoverImagePath = "~/1.jpg",
                            Description = "A children's fantasy novel by J.R.R. Tolkien",
                            Edition = "Revised edition",
                            Language = "English",
                            PageCount = 310,
                            Price = 120000,
                            PublishYear = "1937",
                            PublisherId = 1,
                            Quantity = 12,
                            Title = "The Hobbit"
                        },
                        new
                        {
                            BookId = 11,
                            AuthorId = 3,
                            CategoryId = 3,
                            CoverImagePath = "~/1.jpg",
                            Description = "A popular science book by British physicist Stephen Hawking",
                            Edition = "First edition",
                            Language = "English",
                            PageCount = 212,
                            Price = 180000,
                            PublishYear = "1988",
                            PublisherId = 2,
                            Quantity = 5,
                            Title = "A Brief History of Time"
                        },
                        new
                        {
                            BookId = 12,
                            AuthorId = 2,
                            CategoryId = 4,
                            CoverImagePath = "~/1.jpg",
                            Description = "A romantic novel by English author Jane Austen",
                            Edition = "First edition",
                            Language = "English",
                            PageCount = 279,
                            Price = 90000,
                            PublishYear = "1813",
                            PublisherId = 5,
                            Quantity = 15,
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            BookId = 13,
                            AuthorId = 3,
                            CategoryId = 3,
                            CoverImagePath = "~/1.jpg",
                            Description = "A popular-science book by British physicists Stephen Hawking and Leonard Mlodinow",
                            Edition = "First edition",
                            Language = "English",
                            PageCount = 198,
                            Price = 200000,
                            PublishYear = "2010",
                            PublisherId = 4,
                            Quantity = 3,
                            Title = "The Grand Design"
                        },
                        new
                        {
                            BookId = 14,
                            AuthorId = 5,
                            CategoryId = 1,
                            CoverImagePath = "~/1.jpg",
                            Description = "A detective novel by Agatha Christie",
                            Edition = "First edition",
                            Language = "English",
                            PageCount = 288,
                            Price = 85000,
                            PublishYear = "1926",
                            PublisherId = 1,
                            Quantity = 6,
                            Title = "The Murder of Roger Ackroyd"
                        },
                        new
                        {
                            BookId = 15,
                            AuthorId = 8,
                            CategoryId = 4,
                            CoverImagePath = "~/1.jpg",
                            Description = "A novel by John Green",
                            Edition = "First edition",
                            Language = "English",
                            PageCount = 313,
                            Price = 170000,
                            PublishYear = "2012",
                            PublisherId = 2,
                            Quantity = 9,
                            Title = "The Fault in Our Stars"
                        });
                });

            modelBuilder.Entity("API.Data.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Mystery and crime novels",
                            Name = "Detective"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Books about art, artists and art history",
                            Name = "Art"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Books about natural science, mathematics, and technology",
                            Name = "Science"
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Books about imaginary people and events",
                            Name = "Fiction"
                        },
                        new
                        {
                            CategoryId = 5,
                            Description = "Books about historical events and figures",
                            Name = "History"
                        },
                        new
                        {
                            CategoryId = 6,
                            Description = "Books about people's lives and experiences",
                            Name = "Biography"
                        },
                        new
                        {
                            CategoryId = 7,
                            Description = "Books about travel destinations and experiences",
                            Name = "Travel"
                        },
                        new
                        {
                            CategoryId = 8,
                            Description = "Books about business management, entrepreneurship, and finance",
                            Name = "Business"
                        },
                        new
                        {
                            CategoryId = 9,
                            Description = "Books about cooking techniques, recipes, and ingredients",
                            Name = "Cooking"
                        },
                        new
                        {
                            CategoryId = 10,
                            Description = "Books about personal development, motivation, and success",
                            Name = "Self-help"
                        });
                });

            modelBuilder.Entity("API.Data.Instance", b =>
                {
                    b.Property<int>("InstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstanceID"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("InstanceID");

                    b.HasIndex("BookId");

                    b.HasIndex("StatusId");

                    b.ToTable("Instances");
                });

            modelBuilder.Entity("API.Data.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BorrowedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstanceId")
                        .HasColumnType("int");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("ReaderId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("API.Data.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            Description = "One of the largest and most prestigious English-language publishers.",
                            Name = "Penguin Books"
                        },
                        new
                        {
                            PublisherId = 2,
                            Description = "An American publishing company, one of the world's largest.",
                            Name = "HarperCollins"
                        },
                        new
                        {
                            PublisherId = 3,
                            Description = "An American book publisher and the largest general-interest paperback publisher in the world.",
                            Name = "Random House"
                        },
                        new
                        {
                            PublisherId = 4,
                            Description = "An American publishing company and a division of ViacomCBS.",
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            PublisherId = 5,
                            Description = "A global trade publishing company, owned by Holtzbrinck Publishing Group.",
                            Name = "Macmillan Publishers"
                        },
                        new
                        {
                            PublisherId = 6,
                            Description = "The largest university press in the world, publishing in 70 languages and 190 countries.",
                            Name = "Oxford University Press"
                        },
                        new
                        {
                            PublisherId = 7,
                            Description = "The publishing business of the University of Cambridge, one of the world's oldest universities.",
                            Name = "Cambridge University Press"
                        },
                        new
                        {
                            PublisherId = 8,
                            Description = "A global academic publishing company, the product of a merger between Springer Science+Business Media and Nature Publishing Group.",
                            Name = "Springer Nature"
                        },
                        new
                        {
                            PublisherId = 9,
                            Description = "The world's third-largest trade book publisher, headquartered in France.",
                            Name = "Hachette Livre"
                        },
                        new
                        {
                            PublisherId = 10,
                            Description = "A British independent publishing house, best known for publishing the Harry Potter series.",
                            Name = "Bloomsbury Publishing"
                        });
                });

            modelBuilder.Entity("API.Data.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Reader"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Librarian"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("API.Data.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Description = "Available"
                        },
                        new
                        {
                            StatusId = 2,
                            Description = "On Loan"
                        },
                        new
                        {
                            StatusId = 3,
                            Description = "Broken"
                        });
                });

            modelBuilder.Entity("API.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "ice@gmail.com",
                            Name = "Ice",
                            Password = "jGl25bVBBBW96Qi9Te4V37Fnqchz/Eu4qB9vKrRIqRg=",
                            RoleId = 3,
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "ceri@gmail.com",
                            Name = "Ceri",
                            Password = "LEReHATfTiR8IIkkW2j8gR9yj30w/xSm1kpPqsWOYnA=",
                            RoleId = 2,
                            Username = "librarian"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "user1@gmail.com",
                            Name = "User1",
                            Password = "CgQblGLKpKMbrDVn4Lbm/ZEAeH2yq0M9lvbReMq/zpA=",
                            RoleId = 1,
                            Username = "user1"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "user2@gmail.com",
                            Name = "User2",
                            Password = "YCXRj+SKvUUWhSjxioLiZd2Y1CGnCEqgn2GzQXA5AaM=",
                            RoleId = 1,
                            Username = "user2"
                        },
                        new
                        {
                            UserId = 5,
                            Email = "user3@gmail.com",
                            Name = "User3",
                            Password = "WGD68CtrxiIrpaylI1YPDjZMzYtnvuSG/ov3wB1JLMs=",
                            RoleId = 1,
                            Username = "user3"
                        });
                });

            modelBuilder.Entity("API.Data.Librarian", b =>
                {
                    b.HasBaseType("API.Data.User");

                    b.HasDiscriminator().HasValue("Librarian");
                });

            modelBuilder.Entity("API.Data.Reader", b =>
                {
                    b.HasBaseType("API.Data.User");

                    b.HasDiscriminator().HasValue("Reader");
                });

            modelBuilder.Entity("API.Data.Book", b =>
                {
                    b.HasOne("API.Data.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("API.Data.Instance", b =>
                {
                    b.HasOne("API.Data.Book", "Book")
                        .WithMany("Instance")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Status", "Status")
                        .WithMany("Instances")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("API.Data.Loan", b =>
                {
                    b.HasOne("API.Data.Instance", "Instance")
                        .WithMany("Loans")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Reader", "Reader")
                        .WithMany("Loans")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instance");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("API.Data.User", b =>
                {
                    b.HasOne("API.Data.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Data.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("API.Data.Book", b =>
                {
                    b.Navigation("Instance");
                });

            modelBuilder.Entity("API.Data.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("API.Data.Instance", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("API.Data.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("API.Data.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Data.Status", b =>
                {
                    b.Navigation("Instances");
                });

            modelBuilder.Entity("API.Data.Reader", b =>
                {
                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
