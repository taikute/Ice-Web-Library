// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230413124926_Library")]
    partial class Library
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Data.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Bio = "Unknow",
                            Name = "Albert Einstein"
                        },
                        new
                        {
                            AuthorId = 2,
                            Bio = "Unknow",
                            Name = "Jane Austen"
                        },
                        new
                        {
                            AuthorId = 3,
                            Bio = "Unknow",
                            Name = "Stephen Hawking"
                        },
                        new
                        {
                            AuthorId = 4,
                            Bio = "Unknow",
                            Name = "J.K. Rowling"
                        },
                        new
                        {
                            AuthorId = 5,
                            Bio = "Unknow",
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            AuthorId = 6,
                            Bio = "Unknow",
                            Name = "Neil deGrasse Tyson"
                        },
                        new
                        {
                            AuthorId = 7,
                            Bio = "Unknow",
                            Name = "Isaac Asimov"
                        },
                        new
                        {
                            AuthorId = 8,
                            Bio = "Unknow",
                            Name = "Dan Brown"
                        },
                        new
                        {
                            AuthorId = 9,
                            Bio = "Unknow",
                            Name = "Michelle Obama"
                        });
                });

            modelBuilder.Entity("API.Data.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CoverImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("PublishYear")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 2,
                            CategoryId = 1,
                            CoverImagePath = "~/default-book_cover_image.jpg",
                            Description = "Unknown",
                            Edition = "Latest Edition",
                            ISBN = "ISBN",
                            Language = "English",
                            PageCount = 99,
                            Price = 100000,
                            PublishYear = "2023",
                            PublisherId = 3,
                            Quantity = 1,
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 4,
                            CategoryId = 2,
                            CoverImagePath = "~/default-book_cover_image.jpg",
                            Description = "Unknown",
                            Edition = "Latest Edition",
                            ISBN = "ISBN",
                            Language = "English",
                            PageCount = 99,
                            Price = 100000,
                            PublishYear = "2023",
                            PublisherId = 1,
                            Quantity = 1,
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 6,
                            CategoryId = 3,
                            CoverImagePath = "~/default-book_cover_image.jpg",
                            Description = "Unknown",
                            Edition = "Latest Edition",
                            ISBN = "ISBN",
                            Language = "English",
                            PageCount = 99,
                            Price = 100000,
                            PublishYear = "2023",
                            PublisherId = 4,
                            Quantity = 1,
                            Title = "Animal Farm"
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 7,
                            CategoryId = 2,
                            CoverImagePath = "~/default-book_cover_image.jpg",
                            Description = "Unknown",
                            Edition = "Latest Edition",
                            ISBN = "ISBN",
                            Language = "English",
                            PageCount = 99,
                            Price = 100000,
                            PublishYear = "2023",
                            PublisherId = 2,
                            Quantity = 1,
                            Title = "Nineteen Eighty-Four"
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 8,
                            CategoryId = 1,
                            CoverImagePath = "~/default-book_cover_image.jpg",
                            Description = "Unknown",
                            Edition = "Latest Edition",
                            ISBN = "ISBN",
                            Language = "English",
                            PageCount = 99,
                            Price = 100000,
                            PublishYear = "2023",
                            PublisherId = 5,
                            Quantity = 1,
                            Title = "The Catcher in the Rye"
                        });
                });

            modelBuilder.Entity("API.Data.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Unknow",
                            Name = "Detective"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Unknow",
                            Name = "Art"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Unknow",
                            Name = "Science"
                        });
                });

            modelBuilder.Entity("API.Data.Instance", b =>
                {
                    b.Property<int>("InstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstanceID"));

                    b.Property<string>("BookCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("InstanceID");

                    b.HasIndex("BookId");

                    b.HasIndex("StatusId");

                    b.ToTable("Instances");
                });

            modelBuilder.Entity("API.Data.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BorrowedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstanceId")
                        .HasColumnType("int");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("ReaderId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("API.Data.Publisher", b =>
                {
                    b.Property<int>("PublisherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PublisherID");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherID = 1,
                            Description = "One of the largest and most prestigious English-language publishers.",
                            Name = "Penguin Books"
                        },
                        new
                        {
                            PublisherID = 2,
                            Description = "An American publishing company, one of the world's largest.",
                            Name = "HarperCollins"
                        },
                        new
                        {
                            PublisherID = 3,
                            Description = "An American book publisher and the largest general-interest paperback publisher in the world.",
                            Name = "Random House"
                        },
                        new
                        {
                            PublisherID = 4,
                            Description = "An American publishing company and a division of ViacomCBS.",
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            PublisherID = 5,
                            Description = "A global trade publishing company, owned by Holtzbrinck Publishing Group.",
                            Name = "Macmillan Publishers"
                        });
                });

            modelBuilder.Entity("API.Data.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Reader"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Librarian"
                        });
                });

            modelBuilder.Entity("API.Data.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Description = "Available"
                        },
                        new
                        {
                            StatusId = 2,
                            Description = "On Loan"
                        },
                        new
                        {
                            StatusId = 3,
                            Description = "Broken"
                        });
                });

            modelBuilder.Entity("API.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("API.Data.Librarian", b =>
                {
                    b.HasBaseType("API.Data.User");

                    b.HasDiscriminator().HasValue("Librarian");
                });

            modelBuilder.Entity("API.Data.Reader", b =>
                {
                    b.HasBaseType("API.Data.User");

                    b.HasDiscriminator().HasValue("Reader");
                });

            modelBuilder.Entity("API.Data.Book", b =>
                {
                    b.HasOne("API.Data.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("API.Data.Instance", b =>
                {
                    b.HasOne("API.Data.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Status", "Status")
                        .WithMany("Instances")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("API.Data.Loan", b =>
                {
                    b.HasOne("API.Data.Instance", "Instance")
                        .WithMany("Loans")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Reader", "Reader")
                        .WithMany("Loans")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instance");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("API.Data.User", b =>
                {
                    b.HasOne("API.Data.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Data.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("API.Data.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("API.Data.Instance", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("API.Data.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("API.Data.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Data.Status", b =>
                {
                    b.Navigation("Instances");
                });

            modelBuilder.Entity("API.Data.Reader", b =>
                {
                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
